#pragma once

// Author: Torarin Hals Bakke (2012)

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <type_traits>
#include <utility>
#include <boost/function_types/parameter_types.hpp>
#include <boost/mpl/back.hpp>

template <typename U>
struct functor_argument_type {
  typedef typename boost::mpl::back<
    typename boost::function_types::parameter_types<
      decltype(&U::operator())
    >::type
  >::type type;
};

template <typename T>
struct argument_type {
  typedef typename functor_argument_type<typename std::remove_reference<T>::type>::type type;
};

template <typename, bool is_reference_type>
class operator_call;

template <typename T>
class operator_call<T, true> {
  typedef typename argument_type<T>::type arg_type;
  T fun;
public:
  template <typename U>
  operator_call(U&& u)
  : fun(std::forward<U>(u))
  {}

  void operator()(arg_type t) {
    fun(std::forward<arg_type>(t));
  }
};

template <typename T>
class operator_call<T, false> {
  typedef typename argument_type<T>::type arg_type;
  T fun;
public:
  template <typename U>
  operator_call(U&& u)
  : fun(std::forward<U>(u))
  {}

  void operator()(const arg_type& t) {
    fun(t);
  }

  void operator()(typename std::remove_cv<arg_type>::type&& t) {
    fun(std::move(t));
  }
};

template <typename... Ts>
class functor_visitor;

template <>
class functor_visitor<> {
public:
  void operator()(struct dummy_type);
  typedef void result_type;
};

template <typename T, typename... Ts>
class functor_visitor<T, Ts...>
: public operator_call<T,
         std::is_reference<typename argument_type<T>::type>::value>,
  public functor_visitor<Ts...>
{
public:

  template <typename U, typename... Us>
  functor_visitor(U&& u, Us&&... us)
  : operator_call<T,
      std::is_reference<typename argument_type<T>::type>::value>
      (std::forward<U>(u)),
    functor_visitor<Ts...>(std::forward<Us>(us)...)
  {}

  using functor_visitor<Ts...>::operator();
  using operator_call<T,
        std::is_reference<typename argument_type<T>::type>::value>::operator();
};
